name: Backend CI pipeline
on:
  push:
    branches:
      - main
    paths:
      - 'src/backend/**'

  pull_request:
    branches:
      - main
    paths:
      - 'src/backend/**'

defaults:
  run:
    working-directory: src/backend

jobs:
  # test:
  #   name: Run integration tests
  #   runs-on: ubuntu-latest
  #   services:
  #     db:
  #       image: mysql:8-oracle
  #       env:
  #         MYSQL_DATABASE: hobbie_backend_db_prod
  #         MYSQL_ROOT_PASSWORD: 1
  #       ports:
  #         - 3306:3306

  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: 11
  #         cache: maven

  #     - name: Run tests
  #       run: mvn test
  #       env:
  #         SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/hobbie_backend_db_prod?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Europe/Paris
  #         SPRING_DATASOURCE_USERNAME: root
  #         SPRING_DATASOURCE_PASSWORD: 1

  # lint:
  #   name: Run lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - uses: super-linter/super-linter@v7
  #       env:
  #         DEFAULT_BRANCH: main
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         VALIDATE_JAVA: true

  # build:
  #   name: Build
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   needs: [test, lint]
  
  #   steps:
  #     - uses: actions/checkout@v4
  
  #     - uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: 11
  #         cache: maven
  
  #     - name: Build project
  #       run: mvn clean package -DskipTests

  #     - name: Upload build artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: build-artifacts
  #         path: |
  #           src/backend/target/*.jar
  #           src/backend/target/*.war

  docker:
    name: Build and push docker image
    runs-on: ubuntu-latest
    # needs: [test, lint]
    env:
      REGISTRY: ghcr.io
      SUFFIX: backend
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
      image_tag_short: ${{ steps.set_output.outputs.image_tag_short }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set variables
        id: vars
        run: |
          prefix=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')
          echo "image_name=$prefix-${{ env.SUFFIX }}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest

      - name: Build docker image
        uses: docker/build-push-action@v6
        with:
          context: src/backend
          target: prod
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set image tag outputs
        id: set_output
        env:
          DOCKER_METADATA: ${{ steps.meta.outputs.json }}
        run: |
          # Extract full image reference with sha- tag
          full_ref=$(echo "$DOCKER_METADATA" | jq -r '.tags[] | select(test(":sha-"))' | head -n 1)
    
          # Extract just the tag (after the last colon)
          full_tag="${full_ref##*:}"
          echo "SHA Image tag: $full_tag"
    
          # Short tag = first 7 chars of the sha
          short_tag=$(echo "$full_tag" | cut -c5-11)
          echo "Short form: $short_tag"
    
          echo "image_tag=$full_tag" >> "$GITHUB_OUTPUT"
          echo "image_tag_short=$short_tag" >> "$GITHUB_OUTPUT"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}:${{ steps.set_output.outputs.image_tag }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: src/backend
          target: prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  update-helm:
    name: Sync helm chart image tag
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: docker
    steps:
      - uses: actions/checkout@v4

      - name: Update tag in Helm chart and create PR
        id: update-helm
        uses: fjogeleit/yaml-update-action@v0.16.1
        with:
          valueFile: 'charts/backend/environments/values.prod.yaml'
          propertyPath: 'image.tag'
          value: ${{ needs.docker.outputs.image_tag }}
          masterBranchName: main
          targetBranch: main
          branch: ci/backend-helm-update-${{ needs.docker.outputs.image_tag_short }}
          createPR: true
          message: 'ci: update Backend helm chart image tag to ${{ needs.docker.outputs.image_tag_short }}...'

      - name: Enable auto-merge
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          pull-request-number: ${{ fromJson(steps.update-helm.outputs.pull_request).number }}
          merge-method: squash